[gd_scene load_steps=5 format=3 uid="uid://d1j2jhkrfsyed"]

[ext_resource type="Texture2D" uid="uid://opk42meu54pw" path="res://icon.png" id="1"]
[ext_resource type="Material" uid="uid://bhm4pvjj1vfqd" path="res://Scenes/Particles/First Pass Particles.tres" id="2"]

[sub_resource type="Shader" id="1"]
code = "shader_type canvas_item;

uniform vec3 color = vec3(0.71, 0.93, 0.95);
uniform int OCTAVES = 4;

float rand(vec2 coord){
	return fract(sin(dot(coord, vec2(56, 78)) * 1000.0) * 1000.0);
}

float noise(vec2 coord){
	vec2 i = floor(coord);
	vec2 f = fract(coord);

	// 4 corners of a rectangle surrounding our point
	float a = rand(i);
	float b = rand(i + vec2(1.0, 0.0));
	float c = rand(i + vec2(0.0, 1.0));
	float d = rand(i + vec2(1.0, 1.0));

	vec2 cubic = f * f * (3.0 - 2.0 * f);

	return mix(a, b, cubic.x) + (c - a) * cubic.y * (1.0 - cubic.x) + (d - b) * cubic.x * cubic.y;
}

float fbm(vec2 coord){
	float value = 0.0;
	float scale = 0.5;

	for(int i = 0; i < OCTAVES; i++){
		value += noise(coord) * scale;
		coord *= 2.0;
		scale *= 0.5;
	}
	return value;
}

void fragment() {
	vec2 coord = UV * 20.0;

	vec2 motion = vec2( fbm(coord + vec2(TIME * -0.5, TIME * 0.5)) );

	float final = fbm(coord + motion);

	COLOR = vec4(color, final * 0.5);
}"

[sub_resource type="ShaderMaterial" id="2"]
shader = SubResource("1")
shader_parameter/color = Vector3(0.71, 0.93, 0.95)
shader_parameter/OCTAVES = 4

[node name="Fog" type="Sprite2D"]
modulate = Color(0.54902, 0.643137, 0.501961, 0.454902)
material = SubResource("2")
position = Vector2(120.629, 79.9682)
scale = Vector2(3.76126, 2.49768)
texture = ExtResource("1")

[node name="GPUParticles2D" type="GPUParticles2D" parent="."]
position = Vector2(1.44236, 25.1201)
scale = Vector2(0.3, 0.3)
amount = 512
process_material = ExtResource("2")
lifetime = 4.0
preprocess = 0.1
randomness = 1.0
